Lession: 055 Middleware - Deep dive.mp4
Installing 
1. laravel new projectname
2. composer require laravel/ui
3. php artisan ui vue --auth/php artisan ui bootstrap --auth
4. npm install
5. npm run dev/npm run watch
View
1. Validation Errors
	for getting the result we have to set valuidate rules in Controller
	@if(count($errors)>0)
		<ul>
		@foreach($errors->all() as $error)
			<li class="text-danger">{{$error}}</li>
		@endforeach					
		</ul>
	@endif
Route
**Tips it's a good practice to use route name
1. Route::get('/', function () {return view('welcome');});
2. Route::get('/', ['uses'=>ControllerName@method]);
3. Route::get('/home', 'HomeController@index')->name('home');
3. php artisan route:list
4. Route Group
	Route::group(['prefix'=>'admin'], function(){	
		Route::get('/post/create', ['uses'=>'PostsController@create', 'as'=>'post.create']);
		Route::post('/post/store',['uses'=>'PostsController@store', 'as'=>'post.store']);
	});
5. Middleware
Route::group(['prefix'=>'admin', 'middleware'=>'auth'], function(){	
	Route::get('/post/create', ['uses'=>'PostsController@create', 'as'=>'post.create']);
	Route::post('/post/store',['uses'=>'PostsController@store', 'as'=>'post.store']);
});

Controller
1. Create
	a. php artisan make:controller ControllerName
2. Connect
	a. From Route Route::get('/', ['uses'=>ControllerName@method]);
3. user use App\ModelName for connecting with database 
4. Middleware
    public function __construct()
    {
        $this->middleware('auth');
    }
5. Validate
	$this->validate($request,[
		'title'=>'required|max:255',
		'featured'=>'required|image',
		'content'=>'required',
	]);
6. Saving Files

	$featured = $request->featured;
	$featured_new_name = time().$featured->getClientOriginalName();
	$featured->move('uploads/posts',$featured_new_name);

x. Tips
	x. For getting data we have to include the related model from App directore like use App\Todo
	a. Get all data: $todos = Todo::all();
	b. Send to view with data: return view('todos')->with('todos',$todos);
	c. Form data: use function argument as Request $request then dd($request->all());
	d. Save data: 
	    $todo = new Todo;
    	$todo->todo = $request->todo;
    	$todo->save();
    	return redirect()->back();
		
		or
		
        $post = Post::create([
            'title'=>$request->title,
            'featured'=>'uploads/posts'.$featured_new_name,
            'content'=>$request->content,
            'category_id'=>$request->category_id,
        ]);	
		for using this method we have to put some code in related modal like bolew
		protected $fillable = ['title','featured','content','category_id'];		
		
        $post->tags()->attach($request->tags); added data to pivat tables
		$post->tags()->sync($request->tags); 
		
	e. Delete data:
		$todo = Todo::find($id);
		$todo->delete();
    	return redirect()->back();
		
		or 
		
		Todo::distroy($id);
	
Model
Related Keywords: migration, seeder, factory, and resource
1. Create (Will create Todo class in app directory)
	a. php artisan make:model Todo	
2. Migration (Will update database tables)
	a. php artisan migrate
3. Factory (database\factories)
	a. https://github.com/fzaninotto/Faker
4. Seeder(Need to learn More)
**Seeder files are necessary for default data like admin account
	a. php artisan make:seeder SeederName (will creates a seeder file in database\seeds)
	b. factory(App\Todo::class,7)->create() in created seed file;
	b.1 App\User::create([
        	'name' => 'System Admin',
        	'email' => 'mostak.shahid@gmail.com',
        	'password' => bcrypt('123456789')
        ]);
	c. $this->call(SeederName::class); in database\seeds\DatabaseSeeder.php
5. db:seed
6. Relationship need to declire inside model (Need to learn more)
	a. hasMany
		public function posts(){
			return $this->hasMany('App\Post');
		}
	b. belongsTo
		public function category(){
			return $this->belongsTo('App\Category');
		}
	c. belongsToMany
		public function posts(){
			retuen $this->belongsToMany('App\Post');
		}
	d. hasOne
		public function profile(){
			return $this->hasOne('App\Profile');
		}

Layouting
1. @yield('content')
2.
	@extends('layout')
	@section('content')
		Content
	@stop/@endsection
CSS & JS
	put them into public folder and use like this {{ asset('css/toastr.min.css') }}
Form Handling
1. {{csrf_field()}}
2.  action="/todo/create"
3.  action="{{route('todo.save', ['id' =>  $todo->id])}}"

Tinker
1. php artisan tinker
2. $todos = App\Todo::all();
3. $todo = App\Todo::find(1);/App\Todo::first();
4. $todo->completed = 0;
5. $todo->save();
6. $todo->delete();
7. factory(App\Todo::class,7)->create();

Node and npm
1. install Node JS
2. Check node -v
3. npm install
4. npm run dev
5. npm run watch


Authentication
1. composer require laravel/ui or composer require laravel/ui --dev
2. php artisan ui vue --auth/php artisan ui bootstrap --auth
3.@if(Auth::check())
x. tips
	php artisan ui --help
	
Session
	1. Controller
		for using session we have to 'use Session'
		for using session 'Session::flash('success', 'Your todo was created')';
	2. View
    @if(Session::has('success'))
        toastr.success("{{Session::get('success')}}");
    @endif;

SoftDeletes
	1. in modal at the top 'use Illuminate\Database\Eloquent\SoftDeletes;' 
	2. and in the function 'use SoftDeletes; protected $dates = ['deleted_at'];'
	
Query Builder
Post::withTrashed()->where('id',$id)->get();

Middleware
php artisan make:middleware Admin(it will create a middleware inside midleware folder)
Add rules into it	

        if (!Auth::user()->admin){
            Session::flash('info','You do not have permission to access this page.');
            return redirect()->back();
        }
Add into Kernel.php $routeMiddleware
'admin' => \App\Http\Middleware\Admin::class,

We can also use middle ware without route group
Route::get('/users',['uses'=>'UsersController@index', 'as'=>'users'])->middleware('admin);
we can alse use middleware into Controller too

    public function __construct()
    {
        $this->middleware('admin');
    }
	
Necessary Functions
1. str_slug to create slug from title for using this we have to use composer require laravel/helpers
	


