Lession: 060 Blog site settings.mp4
Installing 
1. composer create-project --prefer-dist laravel/laravel blog "5.7.*"
2. composer require laravel/helpers
3. composer require laravel/ui
4. php artisan ui vue --auth/php artisan ui bootstrap --auth
5. npm install
6. npm run dev/npm run watch
7. php artisan serve / php artisan serve --port=8080

Downloaded Project
Step:
1. download or clone project
2. Go to the folder application using cd
3. Run composer install on your cmd or terminal
4. Copy .env.example file to .env on root folder. 
    You can type copy .env.example .env if using command prompt Windows 
     or cp .env.example .env if using terminal Ubuntu
5. Open your .env file and change the database name (DB_DATABASE)
6. Run php artisan key:generate
7. Run php artisan migrate
8.Run php artisan serve

Tips
for getting data to all of the views
	use View;
	app\Providers\AppServiceProvider.php->boot()
	View::share('Variablename',$variable); //View::share('website', 'test');

for getting functionality to all of the views	
a) Create helpers.php file inside app folder, where you can place all helper functions. Also use function_exists check to avoid errors
b) In composer.json file put in autoload block:
	"autoload" : {
        "files" : [
            "app/helpers.php"
        ]
    }
c) Run composer dump-autoload
Ref: https://laracasts.com/discuss/channels/laravel/where-i-put-my-custom-functions-to-be-accessed-in-view-laravel-53?page=1

View
1. Validation Errors
	for getting the result we have to set valuidate rules in Controller
	@if(count($errors)>0)
		<ul>
		@foreach($errors->all() as $error)
			<li class="text-danger">{{$error}}</li>
		@endforeach					
		</ul>
	@endif
	---------------------------------------
	{{$errors->first('phone')}}
	$errors->has('username')
2.	@if($posts->count()>0)
		@foreach($posts as $post)
		your code
		@endforeach
    @else
3. Auth	
	Auth::id()
	@if(Auth::check())
	@endif
4. Date Time
$discussion->created_at->diffForHumans();
->diffInDays();
->format('d/m/Y');
	
Route
**Tips it's a good practice to use route name
1. Route::get('/', function () {return view('welcome');});
2. Route::get('/', ['uses'=>ControllerName@method]);
3. Route::get('/home', 'HomeController@index')->name('home');
4. Route::get('/home/{variable}', 'HomeController@index')->name('home');
5. Route::get('/home/{optional-variable?}', 'HomeController@index')->name('home');
6. php artisan route:list
7. Route Group
	Route::group(['prefix'=>'admin'], function(){	
		Route::get('/post/create', ['uses'=>'PostsController@create', 'as'=>'post.create']);
		Route::post('/post/store',['uses'=>'PostsController@store', 'as'=>'post.store']);
	});
8. Route::resource('channels','ChannelsController');
9. Middleware
Route::group(['prefix'=>'admin', 'middleware'=>'auth'], function(){	
	Route::get('/post/create', ['uses'=>'PostsController@create', 'as'=>'post.create']);
	Route::post('/post/store',['uses'=>'PostsController@store', 'as'=>'post.store']);
});
Route::resource('channel','ChannelController')->middleware('admin');
10. Dynamic Route
Route::get('{page}', function($slug){
	$page = \App\Page::findBySlug($slug);
	// return view('default', compact('page'));
	// if ($page->slug == 'about-us'){
	// 	return view('pages.about-us', compact('page'));
	// }
	// elseif ($page->slug == 'contact-us'){
	// 	return view('pages.contact-us', compact('page'));
	// }

	$view = 'pages.'.$page->slug;	
	// if (view()->exists($view)){
	// 	return view($view, compact('page'));
	// }
	// return view('default', compact('page'));
	return view()->first([
		$view,
		'default'
	], compact('page'));
});


Controller
1. Create
	a. php artisan make:controller ControllerName
2. Connect
	a. From Route Route::get('/', ['uses'=>ControllerName@method]);
3. user use App\ModelName for connecting with database 
4. Middleware
    public function __construct()
    {
        $this->middleware('auth');
    }
5. Validate
	$this->validate($request,[
		'title'=>array('required','max:255'),
		'featured'=>array('required','image'),
		'content'=>array('required'),
		'dob'=>array("nullable","max:255","regex:/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/", function ($attribute, $value, $fail){
                $signup_age_limit_status = Setting::where('option', 'signup_age_limit_status')->first()->value;
                $signup_age_limit = Setting::where('option', 'signup_age_limit')->first()->value;
                $age = date_diff(date_create($value), date_create('today'))->y;
                if ($signup_age_limit_status && $signup_age_limit && $age < $signup_age_limit) {
                    $fail('Your minimun age should be ' . $signup_age_limit . '.');
                }

            }),
		'buseness_logo' => array("image","max:2000",function ($attribute, $value, $fail) use($request) {
                if ($request->role == 'merchant' && !$value ) {
                    $fail('Please enter Business Logo.');
                }
            }),
	]);
	
	$validate = Validator::make($data, [
		'has_appointment' => 'required|bool',
		'appointment_date' => 'exclude_if:has_appointment,false|required|date',
		'doctor_name' => 'exclude_if:has_appointment,false|required|string',
		
	]);
6. Saving Files

	$featured = $request->featured;
	$featured_new_name = time().$featured->getClientOriginalName();
	$featured->move('uploads/posts',$featured_new_name);
	---------------------------------------------------------------------------------	
	if ($request->hasFile('featured')){
		$featured = $request->featured;
		$featured_new_name = time().$featured->getClientOriginalName();
		$featured->move('uploads/posts',$featured_new_name); 
		$post->featured =  'uploads/posts/'.$featured_new_name;        
	}

x. Tips
	x. For getting data we have to include the related model from App directore like use App\Todo
	x. $next_id = Todo::where('id','>',$todo->id)->min('id');
	x. $next_id = Todo::where('id','>',$todo->id)->first();
	x. $todos = Todo::orderBy('created_at','desc')->paginate(3); and for links into the view use $todos->links()/$todos->appends(request()->except('page'))->links();
	a. Get all data: $todos = Todo::all();
	b. Send to view with data: 
		1. return view('welcome',['tasks' => $tasks,'foo' => 'Foobar','request' => request('title'),'script' => '<script>alert("Foobar")</script>']);
		2. return view('welcome', compact('id', 'name', 'password'));
		3. return view('welcome')->with('name', $value);
		4. return view('welcome')->with(['foo' => 'Foobar','tasks' => ['Go to the store','Go to the market',],]);
		5. return view('welcome')->withTasks($tasks)->withFoo('foo');
		
	c. Form data: 
		use function argument as Request $request then dd($request->all());
		$request->hasFile('featured')
		
	d. Save data: 
	    $todo = new Todo;
    	$todo->todo = $request->todo;
    	$todo->save();
    	return redirect()->back();
		
		or
		
        $post = Post::create([
            'title'=>$request->title,
            'featured'=>'uploads/posts'.$featured_new_name,
            'content'=>$request->content,
            'category_id'=>$request->category_id,
        ]);	
		for using this method we have to put some code in related modal like bolew
		protected $fillable = ['title','featured','content','category_id'];		
		
        $post->tags()->attach($request->tags); added data to pivot tables
		$post->tags()->sync($request->tags); 
		
	e. Delete data:	
		if(file_exists($product->image)){
			unlink($product->image);
		}
		
		$todo = Todo::find($id);
		$todo->delete();
    	return redirect()->back();
		
		or 
		
		Todo::destroy($id);
	f. Custom paginaton from array
		$discussions = $this->paginate($answered,3);
		
    public function paginate($items,$perPage){
        $pageStart = \Request::get('page', 1);
        // Start displaying items from this number;
        $offSet = ($pageStart * $perPage) - $perPage; 

        // Get only the items you need using array_slice
        $itemsForCurrentPage = array_slice($items, $offSet, $perPage, true);

        return new LengthAwarePaginator($itemsForCurrentPage, count($items), $perPage,Paginator::resolveCurrentPage(), array('path' => Paginator::resolveCurrentPath()));
    }

$merchants = User::where('role','merchant')->get();
$merchants = User::with('profiles')->where('role','merchant')->get();
$merchants = DB::table("users")->get()->toArray();
$merchants = DB::table("users")->select('users.*', DB::raw('group_concat(case profiles.key when "address_line_1" then profiles.value end) as Custom'))->leftJoin("profiles", 'users.id', '=', 'profiles.user_id')->groupBy('users.id')->where('role','merchant')->get()->toArray();
$query = "SELECT u.*, group_concat(CASE p.key WHEN 'address_line_1' THEN p.value END) address_line_1, group_concat(CASE p.key WHEN 'address_line_2' THEN p.value END) address_line_2 FROM users u LEFT JOIN profiles p ON u.id = p.user_id GROUP BY u.id";
$merchants  = DB::select(DB::raw($query));	


Model
Related Keywords: migration, seeder, factory, and resource
1. Create (Will create Todo class in app directory)
	a. php artisan make:model Todo	
2. Migration (Will update database tables)
	a. php artisan migrate
3. Factory (database\factories)
	a. https://github.com/fzaninotto/Faker
4. Seeder(Need to learn More)
**Seeder files are necessary for default data like admin account
	a. php artisan make:seeder SeederName (will creates a seeder file in database\seeds)
	b. factory(App\Todo::class,7)->create() in created seed file;
	b.1 App\User::create([
        	'name' => 'System Admin',
        	'email' => 'mostak.shahid@gmail.com',
        	'password' => bcrypt('123456789')
        ]);
	c. $this->call(SeederName::class); in database\seeds\DatabaseSeeder.php
5. db:seed
6. Relationship need to declire inside model (Need to learn more)
	Tips: 
		1. One To One (hasOne - belongsTo) Example: User can hasOne Profile, and a Profile can belongsTo User
		2. One To Many (hasMany - belongsTo) Example: Category can hasMany Post, and a Post can belongsTo Category
		3. Many To Many (belongsToMany - belongsToMany) Example: Tag can belongsToMany Post, and Post can belongsTo Tag
		4. j table a onno table er id column thakbe oita normally belongs to, 2 table er jonno alada table thakle on table gulo belongsToMany, j table a onno table er column thake na on table a hasOne or hasMany hobe 
	a. hasMany
		public function posts(){
			return $this->hasMany('App\Post');
		}
	b. belongsTo
		public function category(){
			return $this->belongsTo('App\Category');
		}
	c. belongsToMany
		public function posts(){
			retuen $this->belongsToMany('App\Post');
		}
	d. hasOne
		public function profile(){
			return $this->hasOne('App\Profile');
		}
	e. return $this->belongsTo('App\Media', 'this_tableColunm', 'that_tableColumn');
Migration
	Create
		php artisan make:migration create_users_table
	Add Column
		php artisan make:migration add_is_admin_column_to_users_table --table-"users"
		up function 
			$table->boolean('is_admin')->default(0);
		down function
			$table->dropColumn('is_admin');
	
Layouting
1. @yield('content')
2.
	@extends('layout')
	@section('content')
		Content
	@stop/@endsection
Error page set up like 404
	return abort(404);
	
	https://tutsforweb.com/how-to-create-custom-404-page-laravel/
	app\Exceptions\Handler.php
public function render($request, Exception $exception)
{
    if ($this->isHttpException($exception)) {
        if ($exception->getStatusCode() == 404) {
            return response()->view('404');
        }
         
        if ($exception->getStatusCode() == 500) {
            return response()->view('500');
        }
    }
 
    return parent::render($request, $exception);
}	

CSS & JS
	put them into public folder and use like this {{ asset('css/toastr.min.css') }}
Form Handling
1. {{csrf_field()}}/@csrf
2.  action="/todo/create"
3.  action="{{route('todo.save', ['id' =>  $todo->id])}}"
4. {{ method_field('PUT') }}/@method('PUT')
5. old('field_name')
6. $errors->has('field_name')
7. {{ $errors->first('field_name') }}
8. error.blade.php
	@if ($errors->any())
	<div class="bg-danger text-white">
		<ul>
			@foreach($errors->all() as $error)
			<li>{{$error}}</li>
			@endforeach
		</ul>
	</div>
	@endif

Laravel MIX
Location webpack.mix.js
mix.styles([
     // 'public/css/vendor/normalize.css',
     'resources/assets/css/font-icons/entypo/css/entypo.css'
    ], 'public/css/fonts.css');
mix.scripts([
    'public/js/admin.js',
    'public/js/dashboard.js'
], 'public/js/all.js');


Tinker
1. php artisan tinker
2. $todos = App\Todo::all();
3. $todo = App\Todo::find(1);/App\Todo::first();
4. $todo->completed = 0;
5. $todo->save();
6. $todo->delete();
7. factory(App\Todo::class,7)->create();

Node and npm
1. install Node JS
2. Check node -v
3. npm install
4. npm run dev
5. npm run watch


Authentication
1. composer require laravel/ui or composer require laravel/ui --dev
2. php artisan ui vue --auth/php artisan ui bootstrap --auth
3.@if(Auth::check())
x. tips
	php artisan ui --help
	
Session
	1. Controller
		for using session we have to 'use Session'
		for using session 'Session::flash('success', 'Your todo was created')';
	2. View
    @if(Session::has('success'))
        toastr.success("{{Session::get('success')}}");
    @endif;

SoftDeletes
	1. in modal at the top 'use Illuminate\Database\Eloquent\SoftDeletes;' 
	2. and in the function 'use SoftDeletes;'
	3. in migration we need to add $table->SoftDeletes();
	4. down function of mirgation $table->dropColumn('deleted_at');
	5. Getting them Post::withTrashed()
	6. Restoring restore()
	7. Permanently forceDelete()
	
Query Builder
Post::withTrashed()->where('id',$id)->get();

Middleware
php artisan make:middleware Admin(it will create a middleware inside midleware folder)
Add rules into it	

        if (!Auth::user()->admin){
            Session::flash('info','You do not have permission to access this page.');
            // return redirect()->back();
			return abort(404);
        }
Add into Kernel.php $routeMiddleware
'admin' => \App\Http\Middleware\Admin::class,

We can also use middle ware without route group
Route::get('/users',['uses'=>'UsersController@index', 'as'=>'users'])->middleware('admin);
we can alse use middleware into Controller too

    public function __construct()
    {
        $this->middleware('admin');
    }

Notification
	php artisan make:notification NotificationName    Create a new notification class
	In Controller
		use Notification; at top
		Notification::send($array, new App\Notifications\UserCreated());
		
		use App\Notifications\InvoicePaid;
		
		php artisan make:notification InvoicePaid
		$user = App\User::first();
		$user->notify(new InvoicePaid($invoice));
Mail
	php artisan make:mail EmailClass           Create a new email class
	
	Mail::to('mostak.shahid@gmail.com')->send(new \App\Mail\PurchaseSuccessful)
	
https://www.youtube.com/watch?v=Ny-mloJuoAI
https://www.youtube.com/watch?v=rn0BHdqrock
	
User with email varification
	App/User: class User extends Authenticatable change to class User extends Authenticatable implements MustVerifyEmail
	Route/web: Add Auth::routes(['verify'=>true]);
	HomeController
		public function __construct()
		{
			$this->middleware(['auth'=>'verified]);
		}

		
Necessary Functions
1. str_slug to create slug from title for using this we have to use composer require laravel/helpers
2. str_limit
3. Working with date time
	1. diffForHumans();
	2. ->format('Y-m-d');

Real Life Tools
1. Share: https://www.addthis.com/
2. Mail: 
	composer require spatie/laravel-newsletter
3. Social Media Login: 
	https://laravel.com/docs/6.x/socialite
	https://www.tutsmake.com/laravel-6-google-login-tutorial-with-socialite-demo-example/
4. Shopping Cart
	https://github.com/Crinsane/LaravelShoppingcart
	
	https://github.com/darryldecode/laravelshoppingcart
	
5. Image Resize
	https://github.com/Intervention/image
	http://image.intervention.io/getting_started/installation
Uses
Route::get('/assets/{img}/{width?}/{height?}',function($img, $h=200, $w=200){
    $arr = explode('.',$img);
    $ext = end($arr);
    return \Image::make(asset($img))->resize($h, $w)->response($ext);
})->name('assets');

                <img src="{!! url('assets', ['tes.jpg']) !!}">
                <img src="{!! url('assets', ['tes.jpg',150,100]) !!}">

6. Datatables
composer require yajra/laravel-datatables-oracle
Yajra\Datatables\DatatablesServiceProvider::class,
'Datatables' => Yajra\Datatables\Facades\Datatables::class,

C:\xampp\htdocs\laravel\ecommerce\app\Http\Controllers\CategoriesController.php


Menu management
{{ (request()->is('admin/merchants*')) ? 'menu-open' : '' }}
request()->routeIs('admin.cities*')
Route::named('admin.cities*')
{{ (request()->segment(2) == 'home') ? 'active' : '' }}
{{ (request()->segment(2) == 'home') ? 'active' : '' }}